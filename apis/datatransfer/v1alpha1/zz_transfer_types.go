/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransferObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`
}

type TransferParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +crossplane:generate:reference:type=Endpoint
	// +kubebuilder:validation:Optional
	SourceID *string `json:"sourceId,omitempty" tf:"source_id,omitempty"`

	// Reference to a Endpoint to populate sourceId.
	// +kubebuilder:validation:Optional
	SourceIDRef *v1.Reference `json:"sourceIdRef,omitempty" tf:"-"`

	// Selector for a Endpoint to populate sourceId.
	// +kubebuilder:validation:Optional
	SourceIDSelector *v1.Selector `json:"sourceIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=Endpoint
	// +kubebuilder:validation:Optional
	TargetID *string `json:"targetId,omitempty" tf:"target_id,omitempty"`

	// Reference to a Endpoint to populate targetId.
	// +kubebuilder:validation:Optional
	TargetIDRef *v1.Reference `json:"targetIdRef,omitempty" tf:"-"`

	// Selector for a Endpoint to populate targetId.
	// +kubebuilder:validation:Optional
	TargetIDSelector *v1.Selector `json:"targetIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// TransferSpec defines the desired state of Transfer
type TransferSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransferParameters `json:"forProvider"`
}

// TransferStatus defines the observed state of Transfer.
type TransferStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransferObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Transfer is the Schema for the Transfers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Transfer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransferSpec   `json:"spec"`
	Status            TransferStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferList contains a list of Transfers
type TransferList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Transfer `json:"items"`
}

// Repository type metadata.
var (
	Transfer_Kind             = "Transfer"
	Transfer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Transfer_Kind}.String()
	Transfer_KindAPIVersion   = Transfer_Kind + "." + CRDGroupVersion.String()
	Transfer_GroupVersionKind = CRDGroupVersion.WithKind(Transfer_Kind)
)

func init() {
	SchemeBuilder.Register(&Transfer{}, &TransferList{})
}
