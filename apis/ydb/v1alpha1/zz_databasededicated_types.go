/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseDedicatedObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	DatabasePath *string `json:"databasePath,omitempty" tf:"database_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`

	YdbAPIEndpoint *string `json:"ydbApiEndpoint,omitempty" tf:"ydb_api_endpoint,omitempty"`

	YdbFullEndpoint *string `json:"ydbFullEndpoint,omitempty" tf:"ydb_full_endpoint,omitempty"`
}

type DatabaseDedicatedParameters struct {

	// +kubebuilder:validation:Optional
	AssignPublicIps *bool `json:"assignPublicIps,omitempty" tf:"assign_public_ips,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Location []LocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	LocationID *string `json:"locationId,omitempty" tf:"location_id,omitempty"`

	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`

	// +kubebuilder:validation:Required
	ScalePolicy []ScalePolicyParameters `json:"scalePolicy" tf:"scale_policy,omitempty"`

	// +kubebuilder:validation:Required
	StorageConfig []StorageConfigParameters `json:"storageConfig" tf:"storage_config,omitempty"`

	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`
}

type FixedScaleObservation struct {
}

type FixedScaleParameters struct {

	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`
}

type LocationObservation struct {
}

type LocationParameters struct {

	// +kubebuilder:validation:Optional
	Region []RegionParameters `json:"region,omitempty" tf:"region,omitempty"`
}

type RegionObservation struct {
}

type RegionParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

type ScalePolicyObservation struct {
}

type ScalePolicyParameters struct {

	// +kubebuilder:validation:Required
	FixedScale []FixedScaleParameters `json:"fixedScale" tf:"fixed_scale,omitempty"`
}

type StorageConfigObservation struct {
}

type StorageConfigParameters struct {

	// +kubebuilder:validation:Required
	GroupCount *float64 `json:"groupCount" tf:"group_count,omitempty"`

	// +kubebuilder:validation:Required
	StorageTypeID *string `json:"storageTypeId" tf:"storage_type_id,omitempty"`
}

// DatabaseDedicatedSpec defines the desired state of DatabaseDedicated
type DatabaseDedicatedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseDedicatedParameters `json:"forProvider"`
}

// DatabaseDedicatedStatus defines the observed state of DatabaseDedicated.
type DatabaseDedicatedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseDedicatedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseDedicated is the Schema for the DatabaseDedicateds API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type DatabaseDedicated struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseDedicatedSpec   `json:"spec"`
	Status            DatabaseDedicatedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseDedicatedList contains a list of DatabaseDedicateds
type DatabaseDedicatedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseDedicated `json:"items"`
}

// Repository type metadata.
var (
	DatabaseDedicated_Kind             = "DatabaseDedicated"
	DatabaseDedicated_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseDedicated_Kind}.String()
	DatabaseDedicated_KindAPIVersion   = DatabaseDedicated_Kind + "." + CRDGroupVersion.String()
	DatabaseDedicated_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseDedicated_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseDedicated{}, &DatabaseDedicatedList{})
}
