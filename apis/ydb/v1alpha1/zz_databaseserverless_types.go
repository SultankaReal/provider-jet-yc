/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseServerlessObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	DatabasePath *string `json:"databasePath,omitempty" tf:"database_path,omitempty"`

	DocumentAPIEndpoint *string `json:"documentApiEndpoint,omitempty" tf:"document_api_endpoint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`

	YdbAPIEndpoint *string `json:"ydbApiEndpoint,omitempty" tf:"ydb_api_endpoint,omitempty"`

	YdbFullEndpoint *string `json:"ydbFullEndpoint,omitempty" tf:"ydb_full_endpoint,omitempty"`
}

type DatabaseServerlessParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	LocationID *string `json:"locationId,omitempty" tf:"location_id,omitempty"`
}

// DatabaseServerlessSpec defines the desired state of DatabaseServerless
type DatabaseServerlessSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseServerlessParameters `json:"forProvider"`
}

// DatabaseServerlessStatus defines the observed state of DatabaseServerless.
type DatabaseServerlessStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseServerlessObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseServerless is the Schema for the DatabaseServerlesss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type DatabaseServerless struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseServerlessSpec   `json:"spec"`
	Status            DatabaseServerlessStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseServerlessList contains a list of DatabaseServerlesss
type DatabaseServerlessList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseServerless `json:"items"`
}

// Repository type metadata.
var (
	DatabaseServerless_Kind             = "DatabaseServerless"
	DatabaseServerless_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseServerless_Kind}.String()
	DatabaseServerless_KindAPIVersion   = DatabaseServerless_Kind + "." + CRDGroupVersion.String()
	DatabaseServerless_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseServerless_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseServerless{}, &DatabaseServerlessList{})
}
